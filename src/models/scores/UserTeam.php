<?php

namespace webrise1\mentor\models\scores;

use webrise1\mentor\models\User;
use Yii;

/**
 * This is the model class for table "{{%user_team}}".
 *
 * @property int $user_id
 * @property int $team_id
 * @property string|null $created_at
 * @property string|null $updated_at
 *
 * @property Team $team
 * @property User $user
 */
class UserTeam extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%mentor_user_team}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['user_id', 'team_id'], 'required'],
            [['user_id', 'team_id'], 'integer'],
            [['created_at', 'updated_at'], 'safe'],
            [['user_id', 'team_id'], 'unique', 'targetAttribute' => ['user_id', 'team_id']],
            [['team_id'], 'exist', 'skipOnError' => true, 'targetClass' => Team::class, 'targetAttribute' => ['team_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'user_id' => 'Участник',
            'team_id' => 'Команда',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * Gets query for [[Team]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getTeam()
    {
        return $this->hasOne(Team::class, ['id' => 'team_id']);
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::class, ['id' => 'user_id']);
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        $team = $this->team;
        if ($team) {
            $oldTeamId = !$this->isNewRecord && $changedAttributes['team_id'] != $this->team_id ? $changedAttributes['team_id'] : null;
            $team->reCount($oldTeamId);
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        $this->team->reCount();
        parent::afterDelete();
    }


    /**
     * @param int $teamId
     * @return false|int|null|string
     */
    public static function getAllUserPoints(int $teamId)
    {
        $usersIds = self::find()
            ->select('user_id')
            ->where(['team_id' => $teamId])
            ->column();

        return UserTask::find()->select('SUM([[point]]) as totalPoints')
            ->where(['user_id' => $usersIds])
            ->scalar();
    }
}
